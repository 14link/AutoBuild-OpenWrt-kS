#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_op_5.4-zh

on:
  repository_dispatch:
  workflow_dispatch:
#    inputs:
#      ssh:
#        description: 'SSH connection to Actions'
#        required: false
#        default: 'false'
#  schedule:
#    - cron: 0 0 5 * *  
  
  
#  release:
#    types: [published]

#  push:
#    branches: 
#      - master

#  schedule:
#    - cron: 0 6 */10 * *
  
  #watch:
  #  types: [started]

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
#  REPO_URL: https://github.com/Lienol/openwrt
#  REPO_BRANCH: master
#  FEEDS_CONF: feeds.conf.default
#  CONFIG_FILE: x86_64.config
#  DIY_P1_SH: diy-p1-lede.sh
#  DIY_P2_SH: diy-p2-lede.sh


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 43008
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    #steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> ./feeds.conf.default
        echo "src-git ssrp https://github.com/fw876/helloworld" >> ./feeds.conf.default
    #    sed -i 's/KERNEL_PATCHVER:=5.10/KERNEL_PATCHVER:=5.4/g' ./target/linux/x86/Makefile
    #    sed -i 's/KERNEL_PATCHVER:=5.15/KERNEL_PATCHVER:=5.4/g' ./target/linux/x86/Makefile
    #    sed -i 's/KERNEL_PATCHVER:=6.1/KERNEL_PATCHVER:=5.4/g' ./target/linux/x86/Makefile
    #    sed -i 's/KERNEL_TESTING_PATCHVER:=5.10/KERNEL_TESTING_PATCHVER:=5.4/g' ./target/linux/x86/Makefile
    #    sed -i 's/KERNEL_TESTING_PATCHVER:=5.15/KERNEL_TESTING_PATCHVER:=5.4/g' ./target/linux/x86/Makefile
    #    sed -i 's/KERNEL_TESTING_PATCHVER:=6.1/KERNEL_TESTING_PATCHVER:=5.4/g' ./target/linux/x86/Makefile        
    #    echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
       
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds clean
        ./scripts/feeds update -a && ./scripts/feeds install -a
        
    #- name: Import external feeds - passwall
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
    #    git clone "your_github_link" package/"your_folder_name"      

    #- name: Import external feeds - JerryKuKu Argon
    #  working-directory: ./openwrt
    #  run: |
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon-jerrykuku
    
    - name: Import external feeds
      working-directory: ./openwrt
      run: |
        git clone -b 18.06 https://github.com/kiddin9/luci-theme-edge package/luci-theme-edge
        git clone https://github.com/esirplayground/luci-app-poweroff package/luci-app-poweroff
        git clone https://github.com/sirpdboy/luci-app-autotimeset package/luci-app-autotimeset
    #    git clone https://github.com/sirpdboy/luci-app-wizard package/luci-app-wizard
    #    git clone https://github.com/sirpdboy/luci-app-netdata package/luci-app-netdata
        
    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig

    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    #- name: Download package
    #  working-directory: ./openwrt
    #  run: |
    #    make download -j$(nproc)
    #    find dl -size -1024c -exec ls -l {} \;
    #    find dl -size -1024c -exec rm -f {} \;
        
    #- name: Build firmware
    #  working-directory: ./openwrt
    #  run: |
    #    echo -e "$(nproc) thread build."
    #    make -j$(nproc) V=s
        
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j8 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%Y年%m月%d日-%H点")" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin压缩目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages/x86_64

    #- name : Upload artifact
    #  uses: actions/upload-artifact@master
    #  with:
    #    name: OpenWrt
    #    path: openwrt/bin
 
    - name: 整理编译好的固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    #- name: Organize files
    #  id: organize
    #  if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #  run: |
    #    cd openwrt/bin/targets/*/*
    #    rm -rf packages
    #    echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #    echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
 
    #- name: 上传固件到github
    #  uses: actions/upload-artifact@main
    #  if: steps.organize.outputs.status == 'success' && !cancelled()
    #  with:
    #    name: OpenWrt_5.10${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #    path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    #- name: 上传固件到WT网盘
    #  id: wetransfer
    #  if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
    #    echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    #    echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
               
    #- name: 创建release标签
    #  id: tag
    #  if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #  run: |
    #    echo "release_tag=${{ env.TAG_TIME }}" >> $GITHUB_OUTPUT
    #    touch release.txt
    #    echo "含Alist、adguardhome、定时设置、Bypass、passwall、openclash、mosdns、lucky、微信推送等插件。" >> release.txt
    #    echo "[固件源码](https://github.com/coolsnowwolf/lede)" >> release.txt
    #    echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
    #    echo "📥 固件下载" >> release.txt
    #    [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [国外WT网盘](${{ steps.wetransfer.outputs.url }})" >> release.txt
    #    echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.FILE_TIME }} 「 openwrt-5.4-X86-64 」     
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: FunctionXJB/delete-workflow-runs@main
      with:
        retain_days: 150
        keep_minimum_runs: 5

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 9
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
