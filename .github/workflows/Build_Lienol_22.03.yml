#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_OpenWrt_Lienol-22.03

# Add a button to trigger the workflow
on:
  repository_dispatch:
  workflow_dispatch:
#  release:
#    types: [published]

  # push:
    # branches: 
      # - main

#  schedule:
#    - cron: 0 0 * * 0
#    - cron: 0 0 * * 5,6,0
  
  #watch:
  #  types: [started]

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  CACHE_BUILD: true
  TZ: Asia/Shanghai
#  REPO_URL: https://github.com/coolsnowwolf/lede
#  REPO_BRANCH: master
#  FEEDS_CONF: feeds.conf.default
#  CONFIG_FILE: x86_64.config
#  DIY_P1_SH: diy-part1-lede.sh
#  DIY_P2_SH: diy-p2-lede.sh

jobs:
  build:
    name: Build_OpenWrt_Lienol-22.03
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Check Server Performance
      run: |
        echo "Ë≠¶Âëä‚ö†"
        echo "ÂàÜÈÖçÁöÑÊúçÂä°Âô®ÊÄßËÉΩÊúâÈôêÔºåËã•ÈÄâÊã©ÁöÑÊèí‰ª∂ËøáÂ§öÔºåÂä°ÂøÖÊ≥®ÊÑèCPUÊÄßËÉΩÔºÅ"
        echo -e "Â∑≤Áü•CPUÂûãÂè∑ÔºàÈôçÂ∫èÔºâÔºöAMD EPYC 7763, 8370CÔºå8272CLÔºå8171MÔºåE5-2673 \n"
        echo "--------------------------CPU‰ø°ÊÅØ--------------------------"
        echo "CPUÁâ©ÁêÜÊï∞ÈáèÔºö$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPUÊ†∏ÂøÉ‰ø°ÊÅØÔºö$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------ÂÜÖÂ≠ò‰ø°ÊÅØ--------------------------"
        echo "Â∑≤ÂÆâË£ÖÂÜÖÂ≠òËØ¶ÁªÜ‰ø°ÊÅØÔºö"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------Á°¨Áõò‰ø°ÊÅØ--------------------------"
        echo "Á°¨ÁõòÊï∞ÈáèÔºö$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT  
     
    # - name: free disk space
      # run: | 
        # sudo swapoff -a
        # sudo rm -f /swapfile
        # sudo apt clean
        # docker rmi $(docker image ls -aq)
        # df -h

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."      
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://github.com/14link/openwrt-list/raw/master/lienol-2203)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo
        echo " Á≥ªÁªüÁ©∫Èó¥      Á±ªÂûã   ÊÄªÊï∞  Â∑≤Áî®  ÂèØÁî® ‰ΩøÁî®Áéá"
        df -hT $PWD

    - name: ÈáäÊîæUbuntuÁ£ÅÁõòÁ©∫Èó¥
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/Lienol/openwrt
        REPO_BRANCH: 22.03
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "src-git istore https://github.com/linkease/istore;main" >> ./feeds.conf.default
        echo "src-git diypkg https://github.com/14link/diy-package;leo" >> ./feeds.conf.default
    # - name: ÁºìÂ≠òÂä†ÈÄü
      # uses: stupidloud/cachewrtbuild@main
      # if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
      # with:
        # ccache: 'true'
        # prefix: ${{ github.workspace }}/openwrt

    - name: Update & Install feeds & del double feeds & clone app to package
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        rm -rf feeds/packages/net/{xray*,sing*}
        rm -rf feeds/packages/net/v2ray-geodata
        rm -rf feeds/packages/lang/golang        
        ./scripts/feeds install -a
        git clone https://github.com/kiddin9/luci-theme-edge.git package/luci-theme-edge
        git clone https://github.com/sbwml/packages_lang_golang -b 23.x feeds/packages/lang/golang
        git clone https://github.com/sbwml/luci-app-mosdns -b v5 package/mosdns
        git clone https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
        git clone https://github.com/xiaorouji/openwrt-passwall-packages.git package/passwall-packages
        git clone https://github.com/xiaorouji/openwrt-passwall package/luci-app-passwall

    #    ./scripts/feeds install -a

    #- name: Import external feeds - passwall
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
    #    git clone "your_github_link" package/"your_folder_name"      

    #- name: Import external feeds - JerryKuKu Argon
    #  working-directory: ./openwrt
    #  run: |
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon-jerrykuku

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'Lienol-x86_64-2203.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./Lienol-customize.sh && ./Lienol-customize.sh
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%YÂπ¥%mÊúà%dÊó•-%HÁÇπ")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
      
    - name : Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_ipk${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages/x86_64
        
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages      
        find -name "*profiles.json*" | xargs -i rm -rf {}
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    #    find -name "*sha256sums*" | xargs -i rm -rf {} packages
    #    find -name "*version.buildinfo*" | xargs -i rm -rf {} packages
    #    find -name "*feeds.buildinfo*" | xargs -i rm -rf {} packages

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
 
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
       
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2.2.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: „Äå openwrt-Lienol-22.03 „Äç ${{ steps.tag.outputs.release_tag }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 90
        keep_minimum_runs: 45

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 9
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
